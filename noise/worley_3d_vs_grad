vec3 hash( vec3 x )  // replace this by something better
{
    x = vec3( dot(x,vec3(127.1,311.7, 74.7)),
			  dot(x,vec3(269.5,183.3,246.1)),
			  dot(x,vec3(113.5,271.9,124.6)));

	return fract(sin(x)*43758.5453123);
}

vec3 voronoi(vec3 v) {
    vec3 d = vec3(1., 1., 1.);
    vec3 i = floor(v);
    for(float j = -1.; j <= 1.; j += 1.f)
    for(float k = -1.; k <= 1.; k += 1.f)
    for(float l = -1.; l <= 1.; l += 1.f) {
        vec3 seed = i + vec3(j, k, l) + hash(i + vec3(j, k, l));
        vec3 diff = seed - v;
        if(dot(diff, diff) < dot(d, d)) {
            d = diff;
        }
    }
    return d;
}

void mainImage( out vec4 col, in vec2 cs ) {
    cs = (2. * cs - iResolution.xy) / iResolution.y * 4.f;
    vec3 v = voronoi(vec3(cs, iTime/ 4.));
    
    if(cs.x < 0.) {
        col = vec4(vec3(length(v) / sqrt(2.)), 1.);
    } else {
        if(dot(v, v) > 0.) v = normalize(v); 
        vec3 n = -v;
        col = vec4(vec3(n / 2. + 0.5), 1.);
    }
}
